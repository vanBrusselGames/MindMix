-keep class com.google.android.gms.games.leaderboard.** { *; }
-keep class com.google.android.gms.games.snapshot.** { *; }
-keep class com.google.android.gms.games.achievement.** { *; }
-keep class com.google.android.gms.games.event.** { *; }
-keep class com.google.android.gms.games.stats.** { *; }
-keep class com.google.android.gms.games.* { *; }
-keep class com.google.android.gms.common.api.ResultCallback { *; }
-keep class com.google.android.gms.signin.** { *; }
-keep class com.google.android.gms.dynamic.** { *; }
-keep class com.google.android.gms.dynamite.** { *; }
-keep class com.google.android.gms.tasks.** { *; }
-keep class com.google.android.gms.security.** { *; }
-keep class com.google.android.gms.base.** { *; }
-keep class com.google.android.gms.actions.** { *; }
-keep class com.google.games.bridge.** { *; }
-keep class com.google.android.gms.common.ConnectionResult { *; }
-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }
-keep class com.google.android.gms.common.api.** { *; }
-keep class com.google.android.gms.common.data.DataBufferUtils { *; }
-keep class com.google.android.gms.nearby.** { *; }
-keep class com.google.android.gms.ads.** { *; }
-keepnames class com.google.android.gms.ads.MobileAds

# Copyright 2019 Google LLC
#
# The Google Play Core Library is licensed to you under the Play Core Software
# Development Kit Terms of Service
# (https://developer.android.com/guide/playcore/license.html).
# By using the Google Play Core Library, you agree to the Play Core Software
# Development Kit Terms of Service.

# Play Core Proguard Rules: Play In-app Review

-keep class com.google.android.play.core.review.ReviewManager {
  public com.google.android.gms.tasks.Task requestReviewFlow();
  public com.google.android.gms.tasks.Task launchReviewFlow(android.app.Activity, com.google.android.play.core.review.ReviewInfo);
}

-keepnames class com.google.android.play.core.review.ReviewInfo

-keep class com.google.android.play.core.review.ReviewManagerFactory {
  <init>();

  public static com.google.android.play.core.review.ReviewManager create(android.content.Context);
}

-keep class com.google.android.play.core.review.testing.FakeReviewManager {
  public <init>(android.content.Context);
  public com.google.android.gms.tasks.Task requestReviewFlow();
  public com.google.android.gms.tasks.Task launchReviewFlow(android.app.Activity, com.google.android.play.core.review.ReviewInfo);
}

-keep class com.google.android.play.core.review.model.ReviewErrorCode {
    public static int NO_ERROR;
    public static int PLAY_STORE_NOT_FOUND;
    public static int INVALID_REQUEST;
    public static int INTERNAL_ERROR;
}

-keep class com.google.android.play.core.review.ReviewException {
    public int getErrorCode();
}

# Copyright 2018 Google LLC
#
# The Google Play Core Library is licensed to you under the Play Core Software
# Development Kit Terms of Service
# (https://developer.android.com/guide/playcore/license.html).
# By using the Google Play Core Library, you agree to the Play Core Software
# Development Kit Terms of Service.

# Play Core Proguard Rules: Play In-app Update

-keep class com.google.android.play.core.appupdate.AppUpdateInfo {
    public java.lang.String packageName();
    public int availableVersionCode();
    public int updateAvailability();
    public int installStatus();
    public boolean isUpdateTypeAllowed(com.google.android.play.core.appupdate.AppUpdateOptions);
    public boolean isUpdateTypeAllowed(int);
    public int updatePriority();
    public long bytesDownloaded();
    public long totalBytesToDownload();
    public java.lang.Integer clientVersionStalenessDays();
}

-keep class com.google.android.play.core.appupdate.AppUpdateManager {
    public abstract void registerListener(com.google.android.play.core.install.InstallStateUpdatedListener);
    public abstract void unregisterListener(com.google.android.play.core.install.InstallStateUpdatedListener);

    public abstract com.google.android.gms.tasks.Task completeUpdate();
    public abstract com.google.android.gms.tasks.Task getAppUpdateInfo();
    public com.google.android.gms.tasks.Task startUpdateFlow(com.google.android.play.core.appupdate.AppUpdateInfo, android.app.Activity, com.google.android.play.core.appupdate.AppUpdateOptions);
    public boolean startUpdateFlowForResult(com.google.android.play.core.appupdate.AppUpdateInfo, int, android.app.Activity, int);
    public boolean startUpdateFlowForResult(com.google.android.play.core.appupdate.AppUpdateInfo, int, com.google.android.play.core.common.IntentSenderForResultStarter, int);
    public boolean startUpdateFlowForResult(com.google.android.play.core.appupdate.AppUpdateInfo, android.app.Activity, com.google.android.play.core.appupdate.AppUpdateOptions, int);
    public boolean startUpdateFlowForResult(com.google.android.play.core.appupdate.AppUpdateInfo, com.google.android.play.core.common.IntentSenderForResultStarter, com.google.android.play.core.appupdate.AppUpdateOptions, int);
}

-keep class com.google.android.play.core.appupdate.AppUpdateManagerFactory {
    <init>();

    public static com.google.android.play.core.appupdate.AppUpdateManager create(android.content.Context);
}

-keep class com.google.android.play.core.appupdate.AppUpdateOptions {
    public abstract boolean allowAssetPackDeletion();
    public abstract int appUpdateType();
    public static com.google.android.play.core.appupdate.AppUpdateOptions$Builder newBuilder(int);
    public static com.google.android.play.core.appupdate.AppUpdateOptions defaultOptions(int);
}

-keep class com.google.android.play.core.appupdate.AppUpdateOptions$Builder {
    public abstract com.google.android.play.core.appupdate.AppUpdateOptions$Builder setAllowAssetPackDeletion(boolean);
    public abstract com.google.android.play.core.appupdate.AppUpdateOptions$Builder setAppUpdateType(int);
    public abstract com.google.android.play.core.appupdate.AppUpdateOptions build();
}

-keep class com.google.android.play.core.appupdate.testing.FakeAppUpdateManager {
    public <init>(android.content.Context);

    public void registerListener(com.google.android.play.core.install.InstallStateUpdatedListener);
    public void unregisterListener(com.google.android.play.core.install.InstallStateUpdatedListener);

    public com.google.android.gms.tasks.Task completeUpdate();
    public com.google.android.gms.tasks.Task getAppUpdateInfo();
    public boolean startUpdateFlowForResult(com.google.android.play.core.appupdate.AppUpdateInfo, int, android.app.Activity, int);
    public boolean startUpdateFlowForResult(com.google.android.play.core.appupdate.AppUpdateInfo, int, com.google.android.play.core.common.IntentSenderForResultStarter, int);

    public void setUpdateAvailable(int);
    public void setUpdateAvailable(int, int);
    public void setUpdateNotAvailable();
    public void setInstallErrorCode(int);

    public void userAcceptsUpdate();
    public void userRejectsUpdate();

    public void downloadStarts();
    public void downloadCompletes();
    public void userCancelsDownload();
    public void downloadFails();

    public void installCompletes();
    public void installFails();

    public boolean isConfirmationDialogVisible();
    public boolean isImmediateFlowVisible();
    public boolean isInstallSplashScreenVisible();
    public java.lang.Integer getTypeForUpdateInProgress();

    public void setClientVersionStalenessDays(java.lang.Integer);
    public void setTotalBytesToDownload(long);
    public void setBytesDownloaded(long);
    public void setUpdatePriority(int);
}

-keep class com.google.android.play.core.install.InstallException {
    public int getErrorCode();
}

-keep class com.google.android.play.core.install.InstallState {
    public int installErrorCode();
    public int installStatus();
    public java.lang.String packageName();
    public long bytesDownloaded();
    public long totalBytesToDownload();
}

-keep class com.google.android.play.core.install.InstallStateUpdatedListener {
   <init>();

   public void onStateUpdate(com.google.android.play.core.install.InstallState);
}

-keep class com.google.android.play.core.install.NativeInstallStateUpdateListener {
    <init>();

    public void onStateUpdate(com.google.android.play.core.install.InstallState);
}

-keep class com.google.android.play.core.install.model.ActivityResult {
    public static int RESULT_IN_APP_UPDATE_FAILED;
}

-keep class com.google.android.play.core.install.model.AppUpdateType {
    public static int FLEXIBLE;
    public static int IMMEDIATE;
}

-keep class com.google.android.play.core.install.model.InstallErrorCode {
    public static int NO_ERROR;
    public static int NO_ERROR_PARTIALLY_ALLOWED;
    public static int ERROR_API_NOT_AVAILABLE;
    public static int ERROR_APP_NOT_OWNED;
    public static int ERROR_DOWNLOAD_NOT_PRESENT;
    public static int ERROR_INSTALL_NOT_ALLOWED;
    public static int ERROR_INSTALL_UNAVAILABLE;
    public static int ERROR_INTERNAL_ERROR;
    public static int ERROR_INVALID_REQUEST;
    public static int ERROR_PLAY_STORE_NOT_FOUND;
    public static int ERROR_UNKNOWN;
}

-keep class com.google.android.play.core.install.model.InstallStatus {
    public static int CANCELED;
    public static int DOWNLOADED;
    public static int DOWNLOADING;
    public static int FAILED;
    public static int INSTALLED;
    public static int INSTALLING;
    public static int PENDING;
    public static int REQUIRES_UI_INTENT;
    public static int UNKNOWN;
}

-keep class com.google.android.play.core.install.model.UpdateAvailability {
    public static int UNKNOWN;
    public static int UPDATE_AVAILABLE;
    public static int UPDATE_NOT_AVAILABLE;
    public static int DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS;
}

# Copyright 2022 Google LLC
#
# The Play Integrity API Android library is licensed to you under the Play
# Integrity API Terms of Service
# (https://developer.android.com/google/play/integrity/overview#tos).
# By using the Play Integrity API Android library, you agree to the Play
# Integrity API Terms of Service.

# Play Integrity API Proguard Rules

-keep class com.google.android.play.core.integrity.IntegrityManager {
  public abstract com.google.android.gms.tasks.Task requestIntegrityToken(com.google.android.play.core.integrity.IntegrityTokenRequest);
}

-keep class com.google.android.play.core.integrity.IntegrityManagerFactory {
  public static com.google.android.play.core.integrity.IntegrityManager create(android.content.Context);
}

-keep class com.google.android.play.core.integrity.IntegrityTokenRequest {
  public abstract java.lang.String nonce();
  public abstract java.lang.Long cloudProjectNumber();
  public static com.google.android.play.core.integrity.IntegrityTokenRequest$Builder builder();
}

-keep class com.google.android.play.core.integrity.IntegrityTokenRequest$Builder {
  public abstract com.google.android.play.core.integrity.IntegrityTokenRequest$Builder setNonce(java.lang.String);
  public abstract com.google.android.play.core.integrity.IntegrityTokenRequest$Builder setCloudProjectNumber(long);
  public abstract com.google.android.play.core.integrity.IntegrityTokenRequest build();
}

-keep class com.google.android.play.core.integrity.IntegrityTokenResponse {
  public abstract java.lang.String token();
}

-keep class com.google.android.play.core.integrity.IntegrityServiceException {
  public int getErrorCode();
}

-keep class com.google.android.play.core.integrity.model.IntegrityErrorCode {
    public static int NO_ERROR;
    public static int API_NOT_AVAILABLE;
    public static int PLAY_STORE_NOT_FOUND;
    public static int NETWORK_ERROR;
    public static int PLAY_STORE_ACCOUNT_NOT_FOUND;
    public static int APP_NOT_INSTALLED;
    public static int PLAY_SERVICES_NOT_FOUND;
    public static int APP_UID_MISMATCH;
    public static int TOO_MANY_REQUESTS;
    public static int CANNOT_BIND_TO_SERVICE;
    public static int NONCE_TOO_SHORT;
    public static int NONCE_TOO_LONG;
    public static int GOOGLE_SERVER_UNAVAILABLE;
    public static int NONCE_IS_NOT_BASE64;
    public static int PLAY_STORE_VERSION_OUTDATED;
    public static int PLAY_SERVICES_VERSION_OUTDATED;
    public static int CLOUD_PROJECT_NUMBER_IS_INVALID;
    public static int INTERNAL_ERROR;
}

# Copyright 2018 Google LLC
#
# The Google Play Core Library is licensed to you under the Play Core Software
# Development Kit Terms of Service
# (https://developer.android.com/guide/playcore/license.html).
# By using the Google Play Core Library, you agree to the Play Core Software
# Development Kit Terms of Service.

# Play Core Proguard Rules: Play Core Common (always include this config)

-keep class com.google.android.play.core.common.IntentSenderForResultStarter {
    public void startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle);
}

-keep class com.google.android.play.core.common.LocalTestingException {
}

-keep class com.google.android.play.core.listener.StateUpdatedListener {
    public abstract void onStateUpdate(java.lang.Object);
}

-keep @interface android.support.annotation.NonNull
-keep @interface android.support.annotation.Nullable

-keep class com.google.android.gms.tasks.OnCompleteListener {
    public abstract void onComplete(com.google.android.gms.tasks.Task);
}

-keep class com.google.android.gms.tasks.OnFailureListener {
    public abstract void onFailure(java.lang.Exception);
}

-keep class com.google.android.gms.tasks.OnSuccessListener {
    public abstract void onSuccess(java.lang.Object);
}

-keep class com.google.android.gms.tasks.RuntimeExecutionException {
}

-keep class com.google.android.gms.tasks.Task {
    <init>();

    public com.google.android.gms.tasks.Task addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener);
    public com.google.android.gms.tasks.Task addOnCompleteListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnCompleteListener);
    public abstract com.google.android.gms.tasks.Task addOnFailureListener(com.google.android.gms.tasks.OnFailureListener);
    public abstract com.google.android.gms.tasks.Task addOnFailureListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnFailureListener);
    public abstract com.google.android.gms.tasks.Task addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener);
    public abstract com.google.android.gms.tasks.Task addOnSuccessListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnSuccessListener);
    public abstract java.lang.Exception getException();
    public abstract java.lang.Object getResult();
    public abstract java.lang.Object getResult(java.lang.Class);
    public abstract boolean isComplete();
    public abstract boolean isSuccessful();
}

-keep class com.google.android.gms.tasks.TaskExecutors {
    public static java.util.concurrent.Executor MAIN_THREAD;
}

-keep class com.google.android.gms.tasks.Tasks {
    public static java.lang.Object await(com.google.android.gms.tasks.Task);
    public static java.lang.Object await(com.google.android.gms.tasks.Task, long, java.util.concurrent.TimeUnit);
    public static com.google.android.gms.tasks.Task whenAll(java.util.Collection);
}

-keep class com.google.android.gms.common.api.ApiException {
    public int getStatusCode();
}